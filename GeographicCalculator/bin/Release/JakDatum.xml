<?xml version="1.0"?>
<doc>
<assembly>
<name>
JakDatum
</name>
</assembly>
<members>
<member name="M:JakDatum.GeoFunction.EN2LL(JakDatum.GeoDatum,JakMathLib.Point3D)">
	<summary>
 Convert projected coordinates to the corresponding geographic coordinates
 </summary>
	<param name="CurrentCrs">Reference CRS</param>
	<param name="Point">Projected point to convert</param>
	<returns>Corresponding geographic point</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoFunction.LL2EN(JakDatum.GeoDatum,JakMathLib.Point3D)">
	<summary>
 Convert geographic coordinates to the corresponding projected coordinates
 </summary>
	<param name="CurrentCrs">Reference CRS</param>
	<param name="Point">Geographic point to convert</param>
	<returns>Corresponding projected point</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoFunction.LL2XYZ(JakDatum.GeoDatum,JakMathLib.Point3D)">
	<summary>
 Convert geographic coordinates to the corresponding geocentric coordinates
 </summary>
	<param name="CurrentCrs">Reference CRS</param>
	<param name="Point">Geographic point to convert</param>
	<returns>Corresponding geocentric point</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoFunction.XYZ2LL(JakDatum.GeoDatum,JakMathLib.Point3D)">
	<summary>
 Convert geocentric coordinates to the corresponding geographic coordinates
 </summary>
	<param name="CurrentCrs">Reference CRS</param>
	<param name="Point">Geocentric point to convert</param>
	<returns>Corresponding geographic point</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoFunction.XYZ2XYZ(JakDatum.GeoDatum,JakMathLib.Point3D,System.Boolean)">
	<summary>
 Apply the shifting parameters between two geocentric points on different datums
 </summary>
	<param name="CurrentCrs">Reference CRS</param>
	<param name="Point">Geocentric point to convert</param>
	<param name="ToWgs84">To WGS84 datum?</param>
	<returns>Converted geocentric point</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoFunction.EllDistance(JakDatum.GeoDatum,JakMathLib.Point3D,JakMathLib.Point3D,System.Double@,System.Double@)">
	<summary>
 Calculate the ellipsoidical distance between two geographic point using the Vincenty's formula
 </summary>
	<param name="CurrentCrs">Reference CRS</param>
	<param name="Point1">Start point</param>
	<param name="Point2">End point</param>
	<param name="Alpha1">Bearing from first to second point</param>
	<param name="Alpha2">Bearing from second to first point</param>
	<returns>Ellipsoidical distance</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoFunction.UTM(JakDatum.GeoDatum,JakMathLib.Point3D,System.Boolean)">
	<summary>
 Handling the Universal Transverse of Mercator projection method
 </summary>
	<param name="CurrentCrs">Reference CRS</param>
	<param name="Point">Point to convert</param>
	<param name="IsInverse">True to convert from projected to geographic coordinates, False for the inverse</param>
	<returns>Converted point</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoFunction.TMerc(JakDatum.GeoDatum,JakMathLib.Point3D,System.Boolean)">
	<summary>
 Handling the Transverse of Mercator projection method
 </summary>
	<param name="CurrentCrs">Reference CRS</param>
	<param name="Point">Point to convert</param>
	<param name="IsInverse">True to convert from projected to geographic coordinates, False for the inverse</param>
	<returns>Converted point</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoFunction.Merc(JakDatum.GeoDatum,JakMathLib.Point3D,System.Boolean)">
	<summary>
 Handling the Mercator (EPSG Variant A) projection method
 </summary>
	<param name="CurrentCrs">Reference CRS</param>
	<param name="Point">Point to convert</param>
	<param name="IsInverse">True to convert from projected to geographic coordinates, False for the inverse</param>
	<returns>Converted point</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoFunction.LCC1(JakDatum.GeoDatum,JakMathLib.Point3D,System.Boolean)">
	<summary>
 Handling the Lambert Conformal Conic (1 standard parallel) projection method
 </summary>
	<param name="CurrentCrs">Reference CRS</param>
	<param name="Point">Point to convert</param>
	<param name="IsInverse">True to convert from projected to geographic coordinates, False for the inverse</param>
	<returns>Converted point</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoFunction.LCC2(JakDatum.GeoDatum,JakMathLib.Point3D,System.Boolean)">
	<summary>
 Handling the Lambert Conformal Conic (2 standard parallels) projection method
 </summary>
	<param name="CurrentCrs">Reference CRS</param>
	<param name="Point">Point to convert</param>
	<param name="IsInverse">True to convert from projected to geographic coordinates, False for the inverse</param>
	<returns>Converted point</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.EnumerateProjectionMethods">
	<summary>
 Return an array of the available projection methods names
 </summary>
	<returns>Array of names</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.EnumerateShiftingMethods">
	<summary>
 Return an array of the available datum shift methods names
 </summary>
	<returns>Array of names</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.EnumerateEpsgEllipsoids(System.Int32[]@,System.String[]@,System.String[]@,System.Double[]@,System.Double[]@)">
	<summary>
 Return a series of arrays for the
 </summary>
	<param name="EpsgIDs">Array of the IDs</param>
	<param name="EpsgNames">Array of the Official Names</param>
	<param name="ShortNames">Array of the Shortened Names (for compatibility reasons)</param>
	<param name="EpsgSemiMayorAxis">Array of the Semi mayor axis dimensions</param>
	<param name="EpsgInverseFlattenings">Array of the inverse flattening values</param>
	<returns>Always TRUE</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.ToString">
	<summary>
 Create a string that is parsable by the sub New(String)
 </summary>
	<returns>A formatted string</returns>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.#ctor">
	<summary>
 Create a new default datum
 </summary>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.#ctor(System.String)">
	<summary>
 Create a new Datum from the formatted string
 </summary>
	<param name="CrsString">A string created from ToString() function</param>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.PopulateEpsgList">
	<summary>
 Populate the EPSG known ellipsoid array
 </summary>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.SetEllipsoidByEpsgID(System.Int32)">
	<summary>
 Set the datum ellipsoid from the known EPSG ellipsoids
 </summary>
	<param name="EpsgID"></param>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.SetEllipsoidByValues(System.String,System.String,System.Int32,System.Double,System.Double)">
	<summary>
 Set the datum ellipsoid from the given parameters
 </summary>
	<param name="ID">Ellipsoid ID</param>
	<param name="FullName">Ellipsoid Name</param>
	<param name="ShortName">Shortened Ellipsoid Name (for compatibility reasons)</param>
	<param name="SemiMayorAxis">Ellipsoid Semi Mayor Axis</param>
	<param name="InverseFlattening">Ellipsoid Inverse Flattening</param>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.SetProjectionUTM(System.Int32,System.Boolean)">
	<summary>
 Set the projection as U.T.M. with the given parameters
 </summary>
	<param name="Zone">U.T.M. Zone (from 1 to 60)</param>
	<param name="IsNorthHemisphere">True if North Hemisphere, False otherwise</param>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.SetProjectionTransverseMercator(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
	<summary>
 Set the projection as Transverse of Mercator with the given parameters
 </summary>
	<param name="OriginLongitude">Longitude at Origin</param>
	<param name="OriginLatitude">Latitude at Origin</param>
	<param name="OriginScale">Scale at Origin</param>
	<param name="FalseEasting">Easting at Origin</param>
	<param name="FalseNorthing">Northing at Origin</param>
	<param name="FullName">Projection Name</param>
	<param name="ShortName">Shortened Projection Name (for compatibility reasons)</param>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.SetProjectionMercator(System.String,System.String,System.Double,System.Double,System.Double,System.Double)">
	<summary>
 Set the projection as Direct of Mercator with the given parameters
 </summary>
	<param name="OriginLongitude">Longitude at Origin</param>
	<param name="OriginScale">Scale at Origin</param>
	<param name="FalseEasting">Easting at Origin</param>
	<param name="FalseNorthing">Northing at Origin</param>
	<param name="FullName">Projection Name</param>
	<param name="ShortName">Shortened Projection Name (for compatibility reasons)</param>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.SetProjectionLambertConical1(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
	<summary>
 Set the projection as Lambert Conformal Conical (1 parallel) with the given parameters
 </summary>
	<param name="OriginLongitude">Longitude at Origin</param>
	<param name="OriginLatitude">Latitude at Origin</param>
	<param name="OriginScale">Scale at Origin</param>
	<param name="FalseEasting">Easting at Origin</param>
	<param name="FalseNorthing">Northing at Origin</param>
	<param name="FullName">Projection Name</param>
	<param name="ShortName">Shortened Projection Name (for compatibility reasons)</param>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.SetProjectionLambertConical2(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
	<summary>
 Set the projection as Lambert Conformal Conical (2 parallels) with the given parameters
 </summary>
	<param name="OriginLongitude">Longitude at Origin</param>
	<param name="OriginLatitude">Latitude at Origin</param>
	<param name="FirstParallel">First Tanget Parallel</param>
	<param name="SecondParallel">Second Tangent Parallel</param>
	<param name="FalseEasting">Easting at Origin</param>
	<param name="FalseNorthing">Northing at Origin</param>
	<param name="FullName">Projection Name</param>
	<param name="ShortName">Shortened Projection Name (for compatibility reasons)</param>
	<remarks></remarks>
</member><member name="M:JakDatum.GeoDatum.SetDatumConversion(System.String,System.String,System.Double,System.Double,System.Double)">
	<summary>
 Set Geocentric Translation (3 parameters) conversion
 </summary>
	<param name="FullName">Conversion Name</param>
	<param name="ShortName">Shortened Conversion Name (for compatibility reasons)</param>
	<param name="DeltaX">Delta X</param>
	<param name="DeltaY">Delta Y</param>
	<param name="DeltaZ">Delta Z</param>
	<remarks>All parameters are from local datum to WGS1984 datum.</remarks>
</member><member name="M:JakDatum.GeoDatum.SetDatumConversion(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
	<summary>
 Set Position Vector or Coordinate Frame (7 parameters) conversion
 </summary>
	<param name="FullName">Conversion Name</param>
	<param name="ShortName">Shortened Conversion Name (for compatibility reasons)</param>
	<param name="DeltaX">Delta X</param>
	<param name="DeltaY">Delta Y</param>
	<param name="DeltaZ">Delta Z</param>
	<param name="RotationX">Rotation X</param>
	<param name="RotationY">Rotation Y</param>
	<param name="RotationZ">Rotation Z</param>
	<param name="ScaleFactor">Scale factor (ppm)</param>
	<param name="IsPositionVectorConvention">True for Position Vector, False for Coordinate Frame</param>
	<remarks>All parameters are from local datum to WGS1984 datum.</remarks>
</member><member name="M:JakDatum.GeoDatum.SetDatumConversion(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
	<summary>
 Set Molodensky-Badekas (10 parameters) conversion
 </summary>
	<param name="FullName">Conversion Name</param>
	<param name="ShortName">Shortened Conversion Name (for compatibility reasons)</param>
	<param name="DeltaX">Delta X</param>
	<param name="DeltaY">Delta Y</param>
	<param name="DeltaZ">Delta Z</param>
	<param name="RotationX">Rotation X</param>
	<param name="RotationY">Rotation Y</param>
	<param name="RotationZ">Rotation Z</param>
	<param name="ScaleFactor">Scale factor (ppm)</param>
	<param name="PivotX">Coordinate X of pivot point</param>
	<param name="PivotY">Coordinate Y of pivot point</param>
	<param name="PivotZ">Coordinate Z of pivot point</param>
	<remarks>All parameters are from local datum to WGS1984 datum.</remarks>
</member>
</members>
</doc>